# Copyright 2022-2023 OmniSafe Team. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

defaults:
  # --------------------------------------Basic Configurations----------------------------------- #
  ## -----------------------------Basic configurations for base class DDPG---------------------- ##
  # The random seed
  seed: 0
  # If use tensorboard
  use_tensorboard: True
  # if use wandb
  use_wandb: True
  # The torch device
  algo_device: cpu
  env_device: cpu
  # The environment wrapper type
  wrapper_type: SafetyLayerWrapper
  # Number of epochs
  epochs: 500
  # Number of steps per epoch
  steps_per_epoch: 6000
  # Update after `update_after` steps
  update_after: 1000
  # Update every `update_every` steps
  update_every: 50
  # Check if all models own the same parameter values every `check_freq` epochs
  check_freq: 25
  # Save model to disk every `check_freq` epochs
  save_freq: 10
  # The max length of per epoch
  max_ep_len: 1000
  # The number of test episodes
  num_test_episodes: 10
  # The learning rate of Actor network
  actor_lr: 0.0003
  # The learning rate of Critic network
  critic_lr: 0.001
  # The learning rate of Cost network
  model_lr: 0.001
  # The soft update coefficient
  polyak: 0.999
  # The discount factor of GAE
  gamma: 0.99
  # Actor perdorm random action before `start_steps` steps
  start_steps: 10000
  # The Address for saving training process data
  data_dir: "./runs"


  # ---------------------------------------Optional Configuration-------------------------------- #
  ## -----------------------------------Configuration For Cost Critic--------------------------- ##
  # Whether to use cost critic
  use_cost: True
  # Whether to use cost limit decay
  cost_limit_decay: False
  # The initial value of cost limit
  init_cost_limit: 25.0
  # The target value of cost limit
  target_cost_limit: 25.0
  # The end of cost limit decay epoch
  end_epoch: 100
  # The cost limit
  cost_limit: 25.0
  # Cost discounted factor
  cost_gamma: 1.0
  # Whether to use linear decay of learning rate
  linear_lr_decay: False
  # Whether to use exploration noise anneal
  exploration_noise_anneal: False
  # Whether to use reward penalty
  reward_penalty: False
  # Whether to use KL early stopping
  kl_early_stopping: False
  # Whether to use max gradient norm
  use_max_grad_norm: False
  # The thereshold of max gradient norm
  max_grad_norm: 0.5
  # Whether to use reward scaling
  scale_rewards: False
  # Whether to use standardized observation
  standardized_obs: True
  ## ---------------------------------------Configuration For Model----------------------------- ##
  model_cfgs:
    # Whether to share the weight of Actor network with Critic network
    shared_weights: False
    # The mode to initiate the weight of network, choosing from "kaiming_uniform", "xavier_normal", "glorot" and "orthogonal".
    weight_initialization_mode: "kaiming_uniform"
    # Type of Actor, choosing from "gaussian_annealing", "gaussian_std_net_actor", "gaussian_learning_actor", "categorical_actor"
    actor_type: gaussian
    # Configuration of Actor and Critic network
    ac_kwargs:
      # Configuration of Actor network
      pi:
        # Size of hidden layers
        hidden_sizes: [64, 64]
        # Activation function
        activation: relu
        # Output activation function
        output_activation: tanh
        # Whether to scale action.
        scale_action: True
        # Whether to clip action.
        clip_action: True
        # Whether to learn the standard deviation of Gaussian noise
        std_learning: False
        # The initial value of standard deviation of Gaussian noise
        std_init: 1.0
      # Configuration of Critic network
      val:
        # Number of critic networks
        num_critics: 1
        # Size of hidden layers
        hidden_sizes: [64, 64]
        # Activation function
        activation: relu
  ## --------------------------------------Configuration For Buffer----------------------------- ##
  replay_buffer_cfgs:
    # The size of replay buffer
    size: 50000
    # The size of batch
    batch_size: 256
  ## -----------------------------------Configuration For Safety Layer--------------------------- ##
  env_cfgs:
    # Configuration of LinearCostModel in SafetyLayerWrapper
    safety_layer_cfgs:
      # Size of hidden layers
      hidden_sizes: [400, 300]
      # Activation function
      activation: relu
      # The learning rate of cost model
      model_lr: 0.001
      # The directory to save cost model
      data_dir: "./runs"
      # The size of replay buffer
      buffer_size: 50000
      # The size of batch
      batch_size: 256
